swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /kpi/assign/:
    post:
      tags:
      - kpi
      description: assigns new KPI information to a member of the team
      operationId: KPIController.AssignKPI
      parameters:
      - in: KPIObject
        name: object
        description: the KPI object
        required: true
        schema:
          $ref: '#/definitions/models.KPI'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /kpi/report/{userid}/{month}:
    get:
      tags:
      - kpi
      description: gets a team member kpi information for the month
      operationId: KPIController.GetMemberKPIReport
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /lead/member/{id}:
    post:
      tags:
      - lead
      description: adds a new team member using the user ID
      operationId: TeamLeadController.AddNewMember
      parameters:
      - in: path
        name: visitid
        description: the id of the user you want to make a front desk officer
        required: true
        type: string
      responses:
        "200":
          description: '{string} id of the user'
        "403":
          description: body is empty
  /lead/myteam/:
    get:
      tags:
      - lead
      description: gets a team information
      operationId: TeamLeadController.GetMyTeamInfo
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /lead/pending:
    get:
      tags:
      - lead
      description: gets a team's pending member information
      operationId: TeamLeadController.GetMyPendingTeam
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /lead/pending/{id}:
    delete:
      tags:
      - lead
      description: deletes a team invitation using the user ID
      operationId: TeamLeadController.Delete
      responses:
        "200":
          description: '{string} id of the user'
        "403":
          description: body is empty
  /lead/team/:
    post:
      tags:
      - lead
      description: creates a new team using the user ID
      operationId: TeamLeadController.CreateTeam
      parameters:
      - in: path
        name: teamid
        description: the team object
        required: true
        schema:
          $ref: '#/definitions/models.Team'
      responses:
        "200":
          description: '{string} id of the user'
        "403":
          description: body is empty
  /lead/validate:
    get:
      tags:
      - lead
      description: checks if a user has created a team
      operationId: TeamLeadController.VerifiHasTeam
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /team/accept/{teamid}:
    post:
      tags:
      - team
      description: accepts a new team invitation
      operationId: TeamController.AcceptTeamInvitation
      parameters:
      - in: path
        name: teamid
        description: the team object
        required: true
        type: string
      responses:
        "200":
          description: '{string} id of the user'
        "403":
          description: body is empty
  /team/invitations/pending:
    get:
      tags:
      - team
      description: gets a team pending team requests
      operationId: TeamController.GetMyPendingTeam
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /team/myteam:
    get:
      tags:
      - team
      description: gets a team information
      operationId: TeamController.GetMyTeamInfo
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /team/report:
    get:
      tags:
      - team
      description: gets a team list report
      operationId: TeamController.GetTeamReport
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ValidResponse'
        "403":
          description: body is empty
  /token/token/{email}:
    get:
      tags:
      - token
      description: confirms a number have been registerd for today
      operationId: TokenController.Self Sign-In
      parameters:
      - in: body
        name: body
        description: guest phone number
        required: true
        schema:
          type: string
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Success'
        "403":
          description: body is empty
  /user/update/:
    post:
      tags:
      - user
      description: update the user profile
      operationId: UserController.UpdateProfile
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
definitions:
  models.KPI:
    title: KPI
    type: object
  models.Success:
    title: Success
    type: object
  models.Team:
    title: Team
    type: object
  models.User:
    title: User
    type: object
  models.ValidResponse:
    title: ValidResponse
    type: object
tags:
- name: user
  description: |
    UserController Operations about Users
- name: lead
  description: |
    TeamLeadController handles all team lead functionalities
- name: token
  description: |
    TokenController handles all about token
- name: team
  description: |
    TeamController handles all team RELATED MATTERS
- name: kpi
  description: |
    KPIController controls all KPI related activities
