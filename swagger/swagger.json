{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/lead/member/{id}": {
            "post": {
                "tags": [
                    "lead"
                ],
                "description": "adds a new team member using the user ID",
                "operationId": "TeamLeadController.AddNewMember",
                "parameters": [
                    {
                        "in": "path",
                        "name": "visitid",
                        "description": "the id of the user you want to make a front desk officer",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} id of the user"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/token/token/{email}": {
            "get": {
                "tags": [
                    "token"
                ],
                "description": "confirms a number have been registerd for today",
                "operationId": "TokenController.Self Sign-In",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "guest phone number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Success"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/update/": {
            "post": {
                "tags": [
                    "user"
                ],
                "description": "update the user profile",
                "operationId": "UserController.UpdateProfile",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uid",
                        "description": "The uid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for user content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":uid is not int"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Model": {
            "title": "Model",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "datetime"
                },
                "deleted_at": {
                    "type": "string",
                    "format": "datetime"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "updated_at": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        },
        "models.Success": {
            "title": "Success",
            "type": "object"
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "datetime"
                },
                "deleted_at": {
                    "type": "string",
                    "format": "datetime"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "image": {
                    "type": "string"
                },
                "job_title": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "role": {
                    "type": "integer",
                    "format": "int32"
                },
                "updated_at": {
                    "type": "string",
                    "format": "datetime"
                }
            }
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "lead",
            "description": "TeamLeadController handles all team lead functionalities\n"
        },
        {
            "name": "token",
            "description": "TokenController handles all about token\n"
        }
    ]
}